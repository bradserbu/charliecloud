#!/bin/sh

# The basic algorithm here is that we build up a list of file
# source:destination pairs separated by newlines, then walk through them and
# copy them into the image. We also maintain a list of directories to create
# and a list of file globs to remove.
#
# The colon separator to avoid the difficulty of iterating through a sequence
# of pairs with no arrays or structures in POSIX sh. We could avoid it by
# taking action immediately upon encountering each file in the argument list,
# but that would (a) yield a half-injected image for basic errors like
# misspellings on the command line and (b) would require the image to be first
# on the command line, which seems awkward.
#
# The newline separator is for the same reason and also because it's
# convenient for input from --cmd and --file.
#
# Note on looping through the newlines in a variable: The approach in this
# script is to set IFS to newline, loop, then restore. This is awkward but
# seemed the least bad. Alternatives include:
#
#   1. Piping echo into "while read -r": This executes the while in a
#      subshell, so variables don't stick.
#
#   2. Here document used as input, e.g.:
#
#        while IFS= read -r FILE; do
#          ...
#        done <<EOF
#        $FILES
#        EOF
#
#      This works but seems more awkward.
#
#   3. Here string, e.g. 'while IFS= read -r FILE; do ... done <<< "$FILES"'.
#      This is a bashism.

LIBEXEC="$(cd "$(dirname "$0")" && pwd)"
. "${LIBEXEC}/base.sh"

set -e

# shellcheck disable=SC2034
usage=$(cat <<EOF
Inject files from the host into an image directory.

NOTE: This command is experimental. Features may be incomplete and/or buggy.

Usage:

  $ ch-fromhost [OPTION ...] [FILE_OPTION ...] IMGDIR

Which files to inject (one or more required; can be repeated):

  -c, --cmd CMD    listed in the stdout of CMD
  -f, --file FILE  listed in file FILE
  -p, --path PATH  inject the file at PATH
  --cray-mpi       Cray-enable an MPICH installed within the image
  --nvidia         recommended by nVidia (via "nvidia-container-cli list")

Destination within image:

  -d, --dest DST   place following files in IMGDIR/DST, overriding inference

Options:

  --lib-path       print the inferred destination for shared libraries
  --no-ldconfig    don't run ldconfig even if we injected shared libraries
  -h, --help       print this help and exit
  -v, --verbose    list the injected files
  --version        print version and exit
EOF
)

CRAY_MPI=        # Cray fixups requested
#CRAY_OPENMPI=    # ... for OpenMPI
CRAY_MPICH=      # ... for MPICH
DEST=
IMAGE=
NEWLINE='
'
INJECT_FILES=    # source:destination files to inject
INJECT_MKDIRS=   # directories to create in image (image-rooted)
INJECT_UNLINKS=  # files to rm -f (not rmdir or rm -Rf) (image-rooted)
LIB_DEST=
LIB_DEST_PRINT=
LIB_FOUND=

debug () {
    if [ "$VERBOSE" ]; then
        printf '%s\n' "$1" 1>&2
    fi
}

ensure_nonempty () {
    [ "$2" ] || fatal "$1 must not be empty"
}

fatal () {
    printf 'ch-fromhost: %s\n' "$1" 1>&2
    exit 1
}

info () {
    printf 'ch-fromhost: %s\n' "$1" 1>&2
}

is_bin () {
    case $1 in
        */bin*)
            return 0
            ;;
        *)
            return 1
    esac
}

is_so () {
    case $1 in
        */lib*)
            return 0
            ;;
        *.so)
            return 0
            ;;
        *)
            return 1
    esac
}

queue_files () {
    OLD_IFS="$IFS"
    IFS="$NEWLINE"
    D="${DEST:-$2}"
    for F in $1; do
        case $F in
            *:*)
                fatal "paths can't contain colon: $F"
                ;;
        esac
        if is_so "$F"; then
            debug "found shared library: $F"
            LIB_FOUND=yes
        fi
        # This adds a delimiter only for the second and subsequent files.
        # https://chris-lamb.co.uk/posts/joining-strings-in-posix-shell
        #
        # If destination empty, we'll infer it later.
        INJECT_FILES="${INJECT_FILES:+$INJECT_FILES$NEWLINE}$F:$D"
    done
    IFS="$OLD_IFS"
}

queue_mkdir () {
    [ "$1" ]
    INJECT_MKDIRS="${INJECT_MKDIRS:+$INJECT_MKDIRS$NEWLINE}$1"
}

queue_unlink () {
    [ "$1" ]
    INJECT_UNLINKS="${INJECT_UNLINKS:+$INJECT_UNLINKS$NEWLINE}$1"
}


parse_basic_args "$@"

while [ $# -gt 0 ]; do
    OPT="$1"; shift
    case $OPT in
        -c|--cmd)
            ensure_nonempty --cmd "$1"
            OUT=$($1) || fatal "command failed: $1"
            queue_files "$OUT"
            shift
            ;;
        --cray-mpi)
            # Can't act right away because we need the image path.
            CRAY_MPI=yes
            LIB_FOUND=yes
            ;;
        -d|--dest)
            ensure_nonempty --dest "$1"
            DEST="$1"
            shift
            ;;
        -f|--file)
            ensure_nonempty --file "$1"
            OUT=$(cat "$1") || fatal "cannot read file: $1"
            queue_files "$OUT"
            shift
            ;;
        --lib-path)
            # Note: If this is specified along with one of the file
            # specification options, all the file gathering and checking work
            # will happen, but it will be discarded.
            LIB_FOUND=yes
            LIB_DEST_PRINT=yes
            ;;
        --no-ldconfig)
            NO_LDCONFIG=yes
            ;;
        --nvidia)
            OUT=$(nvidia-container-cli list --binaries --libraries) \
              || fatal "nvidia-container-cli failed; does this host have GPUs?"
            queue_files "$OUT"
            ;;
        -p|--path)
            ensure_nonempty --path "$1"
            queue_files "$1"
            shift
            ;;
        -v|--verbose)
            VERBOSE=yes
            ;;
        -*)
            info "invalid option: $OPT"
            usage
            ;;
        *)
            ensure_nonempty "image path" "$OPT"
            [ -z "$IMAGE" ] || fatal "duplicate image: $OPT"
            [ -d "$OPT" ] || fatal "image not a directory: $OPT"
            IMAGE="$OPT"
            ;;
    esac
done

[ "$IMAGE" ] || fatal "no image specified"

if [ $LIB_FOUND ]; then
    # We want to put the libraries in the first directory that ldconfig
    # searches, so that we can override (or overwrite) any of the same library
    # that may already be in the image.
    debug "asking ldconfig for shared library destination"
    LIB_DEST=$(  "$CH_BIN"/ch-run "$IMAGE" -- /sbin/ldconfig -Nv 2> /dev/null \
               | grep -E '^/' | cut -d: -f1 | head -1)
    [ -z "${LIB_DEST%%/*}" ] || fatal "bad path from ldconfig: $LIB_DEST"
    debug "shared library destination: $LIB_DEST"
fi

if [ $CRAY_MPI ]; then
    SENTINEL=/etc/opt/cray/release/cle-release
    [ -f $SENTINEL ] || fatal "not found: $SENTINEL: are you on a Cray?"

    MPI_VERSION=$("$CH_BIN"/ch-run "$IMAGE" -- mpirun --version || true)
    case $MPI_VERSION in
        *mpich*)
            CRAY_MPICH=yes
            ;;
        *'Open MPI'*)
            # FIXME: remove when implemented
            # shellcheck disable=SC2034
            CRAY_OPENMPI=yes
            ;;
        *)
            fatal "can't find MPI in image"
            ;;
    esac
fi

if [ $CRAY_MPICH ]; then
    # Remove open source libmpi.so.
    #
    # FIXME: These versions are specific to MPICH 3.2.1. I haven't figured out
    # how to use glob patterns here (they don't get expanded when I tried
    # basic things).
    queue_unlink "$LIB_DEST/libmpi.so"
    queue_unlink "$LIB_DEST/libmpi.so.12"
    queue_unlink "$LIB_DEST/libmpi.so.12.1.1"

    # Directory containing Cray's libmpi.so.12.
    # shellcheck disable=SC2016
    [ "$CRAY_MPICH_DIR" ] || fatal '$CRAY_MPICH_DIR not set; is module cray-mpich-abi loaded?'
    CRAY_LIBMPI=$CRAY_MPICH_DIR/lib/libmpi.so.12
    [ -f "$CRAY_LIBMPI" ] || fatal "not found: $CRAY_LIBMPI; is module cray-mpich-abi loaded?"

    # Note: Most or all of these filenames are symlinks, and the copy will
    # convert them to normal files (with the same content). In the
    # documentation, we say not to do that. However, it seems to work, it's
    # simpler than resolving them, and we apply greater abuse to libmpi.so.12
    # below.

    # Cray libmpi.so.12.
    queue_files "$CRAY_LIBMPI"
    # Linked dependencies.
    queue_files "$(  ldd "$CRAY_LIBMPI" \
                   | grep -F /opt \
                   | sed -E 's/^.+ => (.+) \(0x.+\)$/\1/')"
    # dlopen(3)'ed dependencies. I don't know how to not hard-code these.
    queue_files /opt/cray/alps/default/lib64/libalpsutil.so.0.0.0
    queue_files /opt/cray/alps/default/lib64/libalpslli.so.0.0.0
    queue_files /opt/cray/wlm_detect/default/lib64/libwlm_detect.so.0.0.0
    #queue_files /opt/cray/alps/default/lib64/libalps.so.0.0.0

    # libwlm_detect.so requires this file to be present.
    queue_mkdir /etc/opt/cray/wlm_detect
    queue_files /etc/opt/cray/wlm_detect/active_wlm /etc/opt/cray/wlm_detect

    # ALPS libraries require the contents of this directory to be present at
    # the same path as the host. Create the mount point here, then ch-run
    # bind-mounts it later.
    queue_mkdir /var/opt/cray/alps/spool

    # Cray MPICH needs a pile of hugetlbfs filesystems at an arbitrary path
    # (it searched /proc/mounts). ch-run bind-mounts to here later.
    queue_mkdir /var/opt/cray/hugetlbfs
fi

if [ $LIB_DEST_PRINT ]; then
    echo "$LIB_DEST"
    exit 0
fi

[ "$INJECT_FILES" ] || fatal "empty file list"

debug "injecting into image: $IMAGE"

OLD_IFS="$IFS"
IFS="$NEWLINE"
for UNLINK in $INJECT_UNLINKS; do
    debug "  rm -f $IMAGE$UNLINK"
    rm -f "$IMAGE$UNLINK"
done
for MKDIR in $INJECT_MKDIRS; do
    debug "  mkdir -p $IMAGE$MKDIR"
    mkdir -p "$IMAGE$MKDIR"
done
for FILE in $INJECT_FILES; do
    F="${FILE%%:*}"
    D="${FILE#*:}"
    INFER=
    if is_bin "$F" && [ -z "$D" ]; then
        D=/usr/bin
        INFER=" (inferred)"
    elif is_so "$F" && [ -z "$D" ]; then
        D=$LIB_DEST
        INFER=" (inferred)"
    fi
    debug "  $F -> $D$INFER"
    [ "$D" ] || fatal "no destination for: $F"
    [ -z "${D%%/*}" ] || fatal "not an absolute path: $D"
    [ -d "$IMAGE$D" ] || fatal "not a directory: $IMAGE$D"
       cp --dereference --preserve=all "$F" "$IMAGE/$D" \
    || fatal "cannot inject: $F"
done
IFS="$OLD_IFS"

if [ $CRAY_MPICH ]; then
    # Restore libmpi.so symlink (it's part of several chains).
    debug "  ln -s libmpi.so.12 $IMAGE$LIB_DEST/libmpi.so"
    ln -s libmpi.so.12 "$IMAGE$LIB_DEST/libmpi.so"

    # Patch libmpi.so.12 so its soname is "libmpi.so.12" instead of e.g.
    # "libmpich_gnu_51.so.3". Otherwise, the application won't link without
    # LD_LIBRARY_PATH, and LD_LIBRARY_PATH is to be avoided.
    #
    # Note: This currently requires our patched patchelf (issue #256).
    debug "fixing soname on libmpi.so.12"
    "$CH_BIN"/ch-run -w "$IMAGE" -- \
        patchelf --set-soname libmpi.so.12 "$LIB_DEST/libmpi.so.12"
fi

if [ $LIB_FOUND ] && [ -z "$NO_LDCONFIG" ]; then
    debug "running ldconfig"
    "$CH_BIN"/ch-run -w "$IMAGE" -- /sbin/ldconfig
else
    debug "not running ldconfig"
fi

